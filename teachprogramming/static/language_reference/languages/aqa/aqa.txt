# https://filestore.aqa.org.uk/resources/computing/AQA-8520-TG-PC.PDF
# https://filestore.aqa.org.uk/resources/computing/AQA-8525-TG-PC.PDF


## This is a comment  # VER: comment

OUTPUT 'Hello World'  # VER: hello_world


a ← 3        # VER: define_variables
a ← a + 1    # VER: define_variables

CONSTANT PI ← 3.141          # VER: define_constants
CONSTANT CLASS_SIZE ← 23     # VER: define_constants

+ - * /

9 DIV 5  # evaluates to 1
5 DIV 2  # evaluates to 2
8 DIV 4  # evaluates to 2

9 MOD 5  # evaluates to 4
5 MOD 2  # evaluates to 1
8 MOD 4  # evaluates to 0

4 < 5
'A' < 'B'
'adam' < 'adele'

>


3 = 3
qty ≠ 7

3 ≤ 4
4 ≥ 4

(3 = 3) AND (3 ≤ 4)
(x < 1) OR (9 > 9)
NOT (a < b)


a ← 1                    # VER: until_loop
REPEAT                   # VER: until_loop
    OUTPUT a             # VER: until_loop
    a ← a + 1            # VER: until_loop
UNTIL a = 4              # VER: until_loop
## will output 1, 2, 3   # VER: until_loop

a ← 1
WHILE a < 4
    OUTPUT a
    a ← a + 1
ENDWHILE
# will output 1, 2, 3

FOR a ← 1 TO 3
    OUTPUT a
ENDFOR
# will output 1, 2, 3

FOR a ← 1 TO 5 STEP 2
    OUTPUT a
ENDFOR
# will output 1, 3, 5

length ← 0
FOR char IN message
    length ← length + 1
ENDFOR
# will calcuclate the number of characters in message

reversed = ''
FOR char IN message
    reversed ← char + reversed
ENDFOR
OUTPUT reversed

a ← 1
IF (a MOD 2) = 0 THEN
    OUTPUT 'even'
ENDIF

a ← 1
IF (a MOD 2) = 0 THEN
    OUTPUT 'even'
ELSE
    OUTPUT 'odd'
ENDIF

a ← 1
IF (a MOD 4) = 0 THEN
    OUTPUT 'multiple of 4'
ELSE IF (a MOD 4) = 1 THEN
    OUTPUT 'leaves a remainder of 1'
ELSE IF (a MOD 4) = 2 THEN
    OUTPUT 'leaves a remainder of 2'
ELSE
    OUTPUT 'leaves a remainder of 3'
ENDIF

primes ← [2,3,5,7,11,13]
primes[0]  # evaluates to 2
primes[5] ← 17

table = [[1,2],[2,4],[3,6],[4,8]]
table[3][1]  # evaluates to 8
table[3][1]

LEN(primes)   # evaluates to 6
LEN(table)    # evaluates to 4
LEN(table[0])   # evaluates to 2

RECORD Car
    make : String
    model : String
    reg : String
    price : Real
    noOfDoors : Integer
ENDRECORD

Car.model ← 'Fiesta'
OUTPUT Car.model

SUBROUTINE showAdd(a, b)
    result ← a + b
    OUTPUT result
ENDSUBROUTINE

SUBROUTINE sayHi()
    OUTPUT 'Hi'
ENDSUBROUTINE

SUBROUTINE add(a, b)
    result ← a + b
    RETURN result
ENDSUBROUTINE

showAdd(2, 3)
answer ← add(2, 3) * 6

LEN('computer science')   # evaluates to 16
POSITION('computer science', 'm')  # evaluates to 2
SUBSTRING(2, 9, 'computer science')  # evaluates to 'mputer s'
'computer'+'science'  # evaluates to 'computerscience'

STRING_TO_INT('16')# evaluates to the integer 1
STRING_TO_REAL('16.3')# evaluates to the real 16.3
INT_TO_STRING(16)# evaluates to the string '16
REAL_TO_STRING(16.3)# evaluates to the string '16.3
CHAR_TO_CODE('a')# evaluates to 97 using# ASCII/Unicode
CODE_TO_CHAR(97)# evaluates to 'a' using# ASCII/Unicode

a ← USERINPUT
OUTPUT a
OUTPUT a, g

RANDOM_INT(3, 5)# will randomly generate 3, 4 or 5

diceRoll ← RANDOM_INT(1,6)

TRY
    int_input ← STRING_TO_INT(string_input)
CATCH
    OUTPUT 'You must input an integer'
ENDTRY
